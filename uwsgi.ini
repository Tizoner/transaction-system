[uwsgi]
# путь до wsgi-файла, сгенерированного Django
wsgi-file = transaction_system/wsgi.py

strict = true  # предотвращает запуск сервера, если он неправильно настроен 
socket = :8000  # порт, на котором принимаются запросы пользователей
protocol = http

# запустить мастер-процесс для управления дочерними процессами
master = true

# завершить все дочерние процессы
no-orphans = true 

# остановить сервер при получении сигнала SIGTERM
die-on-term = true

# ленивая инициализация приложения позволяет запускать сервер быстрее
# первый полученный запрос будет обрабатываться медленно 
# так как приложение будет инициализироваться
lazy-apps = true

# количество процессов, создаваемое мастер-процессом
# рекомендуется поставить число, не превышающее количество доступных ядер процессора
processes = 6

# количество потоков, используемых каждым процессом 
# каждый запрос от пользователя обрабатывается в отдельном потоке
threads = 2

# по умолчанию uWSGI не инициирует GIL, поэтому потоки не будут работать внутри приложения
enable-threads = true

# через какое количество запросов перезапустить воркер для профилактики утечек памяти
max-requests = 1000

# принудительно перезагрузить воркер, если он превысит порог по потребляемой памяти
reload-on-rss = 1024

# сколько секунд ждать до принудительной перезагрузки воркера 
worker-reload-mercy = 90

# через сколько секунд принудительно завершить запрос от пользователя
harakiri = 90
harakiri-verbose = true

# очистить временные файлы и UNIX-сокеты, используемые сервером
vacuum = true

# прежде чем передать запрос приложению uWSGI считает в памяти его содержимое
post-buffering = 1048576

# размер буфера для чтения HTTP-заголовков
buffer-size = 65535
